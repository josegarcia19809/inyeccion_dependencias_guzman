En Spring Boot, la anotación @RequestScope se utiliza para definir el ciclo de vida de un bean
como Request Scope, lo que significa que se creará una nueva instancia del bean para cada
solicitud HTTP y esa instancia estará disponible solo durante el manejo de esa solicitud.

¿Cuándo usar @RequestScope?
Es útil cuando necesitas que un bean almacene información específica de una solicitud, como
datos del usuario, parámetros enviados, o resultados intermedios que no deben compartirse
entre solicitudes.

Ejemplo práctico
Supongamos que tienes un servicio que procesa información específica de cada solicitud:

import org.springframework.stereotype.Component;
import org.springframework.web.context.annotation.RequestScope;

@RequestScope
@Component
public class RequestData {
    private String userId;

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }
}
En el controlador, puedes usar este bean para almacenar datos relacionados con la solicitud actual:


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class MyController {

    @Autowired
    private RequestData requestData;

    @GetMapping("/process")
    public String processRequest(@RequestHeader("User-Id") String userId) {
        requestData.setUserId(userId);
        return "Request processed for user: " + requestData.getUserId();
    }
}
Beneficios
Aislamiento por solicitud: Cada solicitud tiene su propia instancia, lo que evita problemas de
concurrencia.
Menor consumo de memoria: Los beans solo existen mientras se procesa la solicitud.
Facilidad de manejo de datos específicos de la solicitud.
Casos comunes de uso
Autenticación: Almacenar información sobre el usuario autenticado durante la solicitud.
Seguimiento: Manejar identificadores únicos de transacciones o solicitudes.
Caché temporal: Guardar resultados intermedios que solo son relevantes para la solicitud actual.
Recuerda que para usar @RequestScope, tu aplicación debe estar configurada como una aplicación
web, ya que el ciclo de vida de la solicitud está ligado al servidor web (como Tomcat o Jetty).